name: Build and Run SYCL tests

on:
  push:
    branches: [ sycl-develop ]

env:
  DRIVER_BRANCH: ci/hotfix_agama-ci-devel-1077
  DRIVER_VERSION: hotfix_agama-ci-devel-1077.18
  DRIVER_REPO: agama-builds
  DRIVER_PATH: artifacts/linux/ubuntu/22.04
  SYCL_COMPILER_VERSION: nightly-2025-02-19
  HOME: /tmp/home

jobs:
  test:
    name: SYCL ${{ matrix.runner }} ${{ matrix.test_kind }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: h100
            test_kind: examples
            sycl_target: nvptx64-nvidia-cuda
            platform: nvidia_gpu
            cmake_options: -DDPCPP_SYCL_ARCH=sm_90a
            tests: sgemm_1 tiled_copy sgemm_sm80 sgemm_2 sgemm_sm70 14_ampere_tf32_tensorop_gemm_cute
          - runner: a100
            test_kind: examples
            sycl_target: nvptx64-nvidia-cuda
            platform: nvidia_gpu
            cmake_options: -DDPCPP_SYCL_ARCH=sm_80
            tests: sgemm_1 tiled_copy sgemm_sm80 sgemm_2 sgemm_sm70 14_ampere_tf32_tensorop_gemm_cute
          - runner: pvc1100
            test_kind: examples
            sycl_target: intel_gpu_pvc
            cmake_options: -DCMAKE_CXX_FLAGS="-DPREFETCH_DEFAULT -DSYCL_INTEL_TARGET"
            platform: intel_gpu
            tests: pvc_gemm pvc_collective_builder pvc_gemm_with_epilogue_relu
          - runner: pvc1550
            test_kind: examples
            sycl_target: intel_gpu_pvc
            cmake_options: -DCMAKE_CXX_FLAGS="-DPREFETCH_DEFAULT -DSYCL_INTEL_TARGET"
            platform: intel_gpu
            tests: pvc_gemm pvc_collective_builder pvc_gemm_with_epilogue_relu
          - runner: a100
            test_kind: benchmarks
            sycl_target: nvptx64-nvidia-cuda
            cmake_options: -DDPCPP_SYCL_ARCH=sm_80 -DCUTLASS_ENABLE_SYCL=ON -DCUTLASS_ENABLE_BENCHMARKS=ON -DSYCL_NVIDIA_TARGET=ON -DCUTLASS_SYCL_PROFILING_ENABLED=ON
            platform: nvidia_gpu
            tests: benchmarks
            input: ampere
          - runner: pvc1100
            test_kind: benchmarks
            sycl_target: intel_gpu_pvc
            cmake_options: -DSYCL_INTEL_TARGET=ON -DCUTLASS_ENABLE_SYCL=ON -DCUTLASS_ENABLE_BENCHMARKS=ON
            platform: intel_gpu
            tests: benchmarks
            input: pvc
            env:
              IGC_ExtraOCLOptions: -cl-intel-256-GRF-per-thread
              ONEAPI_DEVICE_SELECTOR: level_zero:gpu
              IGC_VectorAliasBBThreshold: 100000000000
          - runner: pvc1550
            test_kind: benchmarks
            sycl_target: intel_gpu_pvc
            cmake_options: -DSYCL_INTEL_TARGET=ON -DCUTLASS_ENABLE_SYCL=ON -DCUTLASS_ENABLE_BENCHMARKS=ON
            platform: intel_gpu
            tests: benchmarks
            input: pvc
            env:
              IGC_ExtraOCLOptions: -cl-intel-256-GRF-per-thread
              ONEAPI_DEVICE_SELECTOR: level_zero:gpu
              IGC_VectorAliasBBThreshold: 100000000000

    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref || github.ref_name }}

      - name: Allocate nvidia ${{ matrix.runner }} resource
        if: matrix.platform == 'nvidia_gpu'
        uses: ./.github/actions/allocate_cb_resource
        with:
          ACTION: lock
          CB_USER: ${{ secrets.CB_USER }}
          CB_PASSWORD: ${{ secrets.CB_PASSWORD }}

      - name: Setup Intel GPU driver
        if: matrix.platform == 'intel_gpu'
        uses: ./.github/actions/setup_driver
        with:
          DRIVER_BRANCH: ${{ env.DRIVER_BRANCH }}
          DRIVER_VERSION: ${{ env.DRIVER_VERSION }}
          DRIVER_REPO: ${{ env.DRIVER_REPO }}
          DRIVER_PATH: ${{ env.DRIVER_PATH }}
          ARTIFACTORY_USER: ${{ secrets.ARTIFACTORY_USER }}
          ARTIFACTORY_TOKEN: ${{ secrets.ARTIFACTORY_TOKEN }}

      - name: Setup SYCL compiler
        uses: ./.github/actions/setup_sycl_compiler
        with:
          SYCL_COMPILER_VERSION: ${{ env.SYCL_COMPILER_VERSION }}

      - name: Set specific environment variables
        if: ${{ matrix.env != null }}
        run: echo '${{ toJson(matrix.env) }}'  | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' >> "$GITHUB_ENV"

      - name: Configure CUTLASS project with SYCL support
        run: |
          sycl-ls

          clang++ --version

          mkdir -p build && cd build

          cmake -G Ninja \
                -DCMAKE_CUDA_HOST_COMPILER=clang++ \
                -DCUTLASS_ENABLE_SYCL=ON \
                -DDPCPP_SYCL_TARGET=${{ matrix.sycl_target }} \
                -DCMAKE_CXX_COMPILER=clang++ \
                ${{ matrix.cmake_options }} \
                ..

      - name: Build tests
        uses: ./.github/actions/build_tests
        with:
          TARGETS: ${{ matrix.tests }}
        continue-on-error: true

      - name: Run tests
        if: matrix.test_kind != 'benchmarks'
        uses: ./.github/actions/run_tests
        with:
          TARGETS: ${{ matrix.tests }}
        continue-on-error: true

      - name: Run benchmarks
        if: matrix.test_kind == 'benchmarks'
        uses: ./.github/actions/run_benchmarks
        with:
          PLATFORM: ${{ matrix.runner }}
          INPUT: ${{ matrix.input }}

      - name: Construct commit with timestamp
        if: matrix.test_kind == 'benchmarks'
        run: |
          export TZ=UTC
          COMMIT=${{ github.event.pull_request.head.sha || github.sha }}
          TIMESTAMP=$(git show -s --date=iso-strict-local --format=%cd $COMMIT | sed 's/+00:00/Z/')
          echo "TIMESTAMP_COMMIT=${TIMESTAMP}_${COMMIT}" >> "$GITHUB_ENV"

      - name: Upload results
        if: matrix.test_kind == 'benchmarks'
        uses: ./.github/actions/upload-results
        with:
          LOGS_DIR: ${{ github.workspace }}/outputs/testing
          LOG_FILE_NAME: ${{ matrix.runner }}_benchmarks
          ARTIFACT_NAME: cutlass_sycl_${{ matrix.runner }}_benchmarks
          BENCHMARK_TYPE: cutlass
          RUN_INFO: >
            branch=${{ github.event.pull_request.head.ref || github.ref_name }}
            sha=$TIMESTAMP_COMMIT
            platform=${{ matrix.runner }}
            run_type=sycl
          DB_CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING }}

      - name: Release nvidia ${{ matrix.runner }} resource
        if: always() && matrix.platform == 'nvidia_gpu'
        uses: ./.github/actions/allocate_cb_resource
        with:
          ACTION: unlock
          CB_USER: ${{ secrets.CB_USER }}
          CB_PASSWORD: ${{ secrets.CB_PASSWORD }}
