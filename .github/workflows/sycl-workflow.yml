name: Build and Run SYCL tests

on:
  push:
    branches: [ sycl-develop ]

env:
  DRIVER_BRANCH: ci/hotfix_agama-ci-devel-1077
  DRIVER_VERSION: hotfix_agama-ci-devel-1077.18
  DRIVER_REPO: agama-builds
  DRIVER_PATH: artifacts/linux/ubuntu/22.04
  SYCL_COMPILER_VERSION: nightly-2025-02-19
  INTEL_ONEAPI_TOOLKIT_DOWNLOAD_URL: https://registrationcenter-download.intel.com/akdlm/IRC_NAS/6bfca885-4156-491e-849b-1cd7da9cc760/intel-oneapi-base-toolkit-2025.1.1.36_offline.sh
  HOME: /tmp/home

jobs:
  test:
    name: SYCL ${{ matrix.runner }} ${{ matrix.test_kind }} ${{ matrix.compiler }} ${{ matrix.intel_graphics }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: h100
            test_kind: examples
            sycl_target: nvptx64-nvidia-cuda
            platform: nvidia_gpu
            cmake_options: -DDPCPP_SYCL_ARCH=sm_90a
            tests: sgemm_1 tiled_copy sgemm_sm80 sgemm_2 sgemm_sm70 14_ampere_tf32_tensorop_gemm_cute
          - runner: a100
            test_kind: examples
            sycl_target: nvptx64-nvidia-cuda
            platform: nvidia_gpu
            cmake_options: -DDPCPP_SYCL_ARCH=sm_80
            tests: sgemm_1 tiled_copy sgemm_sm80 sgemm_2 sgemm_sm70 14_ampere_tf32_tensorop_gemm_cute
          - runner: pvc1100
            test_kind: examples
            sycl_target: intel_gpu_pvc
            cmake_options: -DCMAKE_CXX_FLAGS="-DPREFETCH_DEFAULT -DSYCL_INTEL_TARGET"
            platform: intel_gpu
            tests: pvc_gemm pvc_collective_builder pvc_gemm_with_epilogue_relu
          - runner: pvc1550
            test_kind: examples
            sycl_target: intel_gpu_pvc
            cmake_options: -DCMAKE_CXX_FLAGS="-DPREFETCH_DEFAULT -DSYCL_INTEL_TARGET"
            platform: intel_gpu
            tests: pvc_gemm pvc_collective_builder pvc_gemm_with_epilogue_relu
          - runner: BMG
            test_kind: examples
            sycl_target: intel_gpu_bmg_g21
            cmake_options: -DCMAKE_CXX_FLAGS="-DPREFETCH_DEFAULT -DSYCL_INTEL_TARGET"
            platform: intel_gpu
            tests: pvc_gemm pvc_collective_builder pvc_gemm_with_epilogue_relu
            env:
              DRIVER_BRANCH: ci/devel
              DRIVER_VERSION: agama-ci-devel-1131
              DRIVER_PATH: artifacts/linux/ubuntu/24.04
          - runner: a100
            test_kind: benchmarks
            sycl_target: nvptx64-nvidia-cuda
            cmake_options: -DDPCPP_SYCL_ARCH=sm_80 -DCUTLASS_ENABLE_BENCHMARKS=ON -DSYCL_NVIDIA_TARGET=ON -DCUTLASS_SYCL_PROFILING_ENABLED=ON -DCUTLASS_ENABLE_TESTS=ON
            platform: nvidia_gpu
            tests: cutlass_benchmarks
            input: ampere
          - runner: pvc1100
            test_kind: benchmarks
            sycl_target: intel_gpu_pvc
            cmake_options: -DSYCL_INTEL_TARGET=ON -DCUTLASS_ENABLE_BENCHMARKS=ON -DCUTLASS_ENABLE_TESTS=ON
            platform: intel_gpu
            tests: cutlass_benchmarks
            input: pvc
            env:
              IGC_ExtraOCLOptions: -cl-intel-256-GRF-per-thread
              ONEAPI_DEVICE_SELECTOR: level_zero:gpu
              IGC_VectorAliasBBThreshold: 100000000000
          - runner: pvc1550
            test_kind: benchmarks
            sycl_target: intel_gpu_pvc
            cmake_options: -DSYCL_INTEL_TARGET=ON -DCUTLASS_ENABLE_BENCHMARKS=ON -DCUTLASS_ENABLE_TESTS=ON
            platform: intel_gpu
            tests: cutlass_benchmarks
            input: pvc
            env:
              IGC_ExtraOCLOptions: -cl-intel-256-GRF-per-thread
              ONEAPI_DEVICE_SELECTOR: level_zero:gpu
              IGC_VectorAliasBBThreshold: 100000000000
          - runner: BMG
            test_kind: benchmarks
            sycl_target: intel_gpu_bmg_g21
            cmake_options: -DCUTLASS_ENABLE_BENCHMARKS=ON -DCUTLASS_ENABLE_TESTS=ON -DCUTLASS_SYCL_PROFILING_ENABLED=ON -DCMAKE_BUILD_TYPE=Release
            platform: intel_gpu
            tests: cutlass_benchmarks
            input: bmg
            env:
              DRIVER_BRANCH: ci/devel
              DRIVER_VERSION: agama-ci-devel-1131
              DRIVER_PATH: artifacts/linux/ubuntu/24.04
              IGC_ExtraOCLOptions: -cl-intel-256-GRF-per-thread
              ONEAPI_DEVICE_SELECTOR: level_zero:gpu
              IGC_VectorAliasBBThreshold: 100000000000
              CMAKE_BUILD_TYPE: Release
              IGC_VISAOptions: -perfmodel
              CUTLASS_SYCL_PROFILING_ENABLED: ON
              SYCL_PROGRAM_COMPILE_OPTIONS: -ze-opt-large-register-file -gline-tables-only
          - runner: BMG
            compiler: NIGHTLY
            intel_graphics: STAGING
            test_kind: benchmarks-codeplay
            sycl_target: intel_gpu_bmg_g21
            cmake_options: -DCUTLASS_ENABLE_BENCHMARKS=ON -DCUTLASS_ENABLE_TESTS=ON -DCUTLASS_SYCL_PROFILING_ENABLED=ON -DCMAKE_BUILD_TYPE=Release
            platform: intel_gpu
            tests: cutlass_benchmarks
            input: bmg
            env:
              IGC_ExtraOCLOptions: -cl-intel-256-GRF-per-thread
              ONEAPI_DEVICE_SELECTOR: level_zero:gpu
              IGC_VectorAliasBBThreshold: 100000000000
              CMAKE_BUILD_TYPE: Release
              IGC_VISAOptions: -perfmodel
              CUTLASS_SYCL_PROFILING_ENABLED: ON
              SYCL_PROGRAM_COMPILE_OPTIONS: -ze-opt-large-register-file -gline-tables-only
          - runner: BMG
            compiler: RELEASE
            intel_graphics: STAGING
            test_kind: benchmarks-codeplay
            sycl_target: intel_gpu_bmg_g21
            cmake_options: -DCUTLASS_ENABLE_BENCHMARKS=ON -DCUTLASS_ENABLE_TESTS=ON -DCUTLASS_SYCL_PROFILING_ENABLED=ON -DCMAKE_BUILD_TYPE=Release
            platform: intel_gpu
            tests: cutlass_benchmarks
            input: bmg
            env:
              IGC_ExtraOCLOptions: -cl-intel-256-GRF-per-thread
              ONEAPI_DEVICE_SELECTOR: level_zero:gpu
              IGC_VectorAliasBBThreshold: 100000000000
              CMAKE_BUILD_TYPE: Release
              IGC_VISAOptions: -perfmodel
              CUTLASS_SYCL_PROFILING_ENABLED: ON
              SYCL_PROGRAM_COMPILE_OPTIONS: -ze-opt-large-register-file -gline-tables-only
          - runner: BMG
            compiler: RELEASE
            intel_graphics: RELEASE
            test_kind: benchmarks-codeplay
            sycl_target: intel_gpu_bmg_g21
            cmake_options: -DCUTLASS_ENABLE_BENCHMARKS=ON -DCUTLASS_ENABLE_TESTS=ON -DCUTLASS_SYCL_PROFILING_ENABLED=ON -DCMAKE_BUILD_TYPE=Release
            platform: intel_gpu
            tests: cutlass_benchmarks
            input: bmg
            env:
              IGC_ExtraOCLOptions: -cl-intel-256-GRF-per-thread
              ONEAPI_DEVICE_SELECTOR: level_zero:gpu
              IGC_VectorAliasBBThreshold: 100000000000
              CMAKE_BUILD_TYPE: Release
              IGC_VISAOptions: -perfmodel
              CUTLASS_SYCL_PROFILING_ENABLED: ON
              SYCL_PROGRAM_COMPILE_OPTIONS: -ze-opt-large-register-file -gline-tables-only
          - runner: BMG
            compiler: NIGHTLY
            intel_graphics: RELEASE
            test_kind: benchmarks-codeplay
            sycl_target: intel_gpu_bmg_g21
            cmake_options: -DCUTLASS_ENABLE_BENCHMARKS=ON -DCUTLASS_ENABLE_TESTS=ON -DCUTLASS_SYCL_PROFILING_ENABLED=ON -DCMAKE_BUILD_TYPE=Release
            platform: intel_gpu
            tests: cutlass_benchmarks
            input: bmg
            env:
              IGC_ExtraOCLOptions: -cl-intel-256-GRF-per-thread
              ONEAPI_DEVICE_SELECTOR: level_zero:gpu
              IGC_VectorAliasBBThreshold: 100000000000
              CMAKE_BUILD_TYPE: Release
              IGC_VISAOptions: -perfmodel
              CUTLASS_SYCL_PROFILING_ENABLED: ON
              SYCL_PROGRAM_COMPILE_OPTIONS: -ze-opt-large-register-file -gline-tables-only

    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref || github.ref_name }}

      - name: Allocate nvidia ${{ matrix.runner }} resource
        if: matrix.platform == 'nvidia_gpu'
        uses: ./.github/actions/allocate_cb_resource
        with:
          ACTION: lock
          CB_USER: ${{ secrets.CB_USER }}
          CB_PASSWORD: ${{ secrets.CB_PASSWORD }}

      - name: Set specific environment variables
        if: ${{ matrix.env != null }}
        run: echo '${{ toJson(matrix.env) }}'  | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' >> "$GITHUB_ENV"

      - name: Setup Intel GPU driver
        if: matrix.platform == 'intel_gpu' && matrix.test_kind != 'benchmarks-codeplay'
        uses: ./.github/actions/setup_driver
        with:
          DRIVER_BRANCH: ${{ env.DRIVER_BRANCH }}
          DRIVER_VERSION: ${{ env.DRIVER_VERSION }}
          DRIVER_REPO: ${{ env.DRIVER_REPO }}
          DRIVER_PATH: ${{ env.DRIVER_PATH }}
          ARTIFACTORY_USER: ${{ secrets.ARTIFACTORY_USER }}
          ARTIFACTORY_TOKEN: ${{ secrets.ARTIFACTORY_TOKEN }}

      - name: Setup SYCL compiler
        if: matrix.runner != 'BMG' && matrix.test_kind != 'benchmarks-codeplay'
        uses: ./.github/actions/setup_sycl_compiler
        with:
          SYCL_COMPILER_VERSION: ${{ env.SYCL_COMPILER_VERSION }}

      - name: Setup Intel oneAPI Toolkit
        if: matrix.runner == 'BMG' && matrix.test_kind != 'benchmarks-codeplay'
        uses: ./.github/actions/setup_oneapi_toolkit
        with:
          INTEL_ONEAPI_TOOLKIT_DOWNLOAD_URL: ${{ env.INTEL_ONEAPI_TOOLKIT_DOWNLOAD_URL }}

      - name: Install DPCPP and GPU driver
        if: matrix.test_kind == 'benchmarks-codeplay'
        uses: ./.github/actions/codeplay_install_dpcpp
        with:
          DPCPP_RELEASE: ${{ matrix.compiler }}
          GPU: ${{ matrix.runner }}
          IGC: ${{ matrix.intel_graphics }}

      - name: Configure CUTLASS project with SYCL support
        run: |
          mkdir -p build && cd build

          cmake -G Ninja \
                -DCMAKE_CUDA_HOST_COMPILER=clang++ \
                -DCUTLASS_ENABLE_SYCL=ON \
                -DDPCPP_SYCL_TARGET=${{ matrix.sycl_target }} \
                ${{ matrix.cmake_options }} \
                ..

      - name: Build tests
        uses: ./.github/actions/build_tests
        with:
          TARGETS: ${{ matrix.tests }}
        continue-on-error: true

      - name: Run tests
        if: "!contains(matrix.test_kind, 'benchmarks')" # yamllint disable-line
        uses: ./.github/actions/run_tests
        with:
          TARGETS: ${{ matrix.tests }}
        continue-on-error: true

      - name: Run benchmarks
        if: "contains(matrix.test_kind, 'benchmarks')" # yamllint disable-line
        uses: ./.github/actions/run_benchmarks
        with:
          PLATFORM: ${{ matrix.runner }}
          INPUT: ${{ matrix.input }}
          DEFAULT_BENCHMARKS_BIN: ${{ github.workspace }}/build/benchmarks/gemm/cutlass_benchmarks_gemm_sycl
        continue-on-error: true

      - name: Construct commit with timestamp
        if: "contains(matrix.test_kind, 'benchmarks')" # yamllint disable-line
        run: |
          export TZ=UTC
          COMMIT=${{ github.event.pull_request.head.sha || github.sha }}
          TIMESTAMP=$(git show -s --date=iso-strict-local --format=%cd $COMMIT | sed 's/+00:00/Z/')
          echo "TIMESTAMP_COMMIT=${TIMESTAMP}_${COMMIT}" >> "$GITHUB_ENV"

      - name: Upload results
        if: "contains(matrix.test_kind, 'benchmarks')" # yamllint disable-line
        uses: ./.github/actions/upload-results
        with:
          LOGS_DIR: ${{ github.workspace }}/outputs/testing
          LOG_FILES_REGEX: "[^_]+_(.*)_benchmarks"
          ARTIFACT_NAME: cutlass_sycl_${{ matrix.runner }}_benchmarks${{ matrix.compiler && format('_{0}', matrix.compiler) }}${{ matrix.intel_graphics && format('_{0}', matrix.intel_graphics) }}
          BENCHMARK_TYPE: cutlass
          RUN_INFO: >
            branch=${{ github.event.pull_request.head.ref || github.ref_name }}
            sha=$TIMESTAMP_COMMIT
            platform=${{ matrix.runner }}
            run_type=sycl
            workflow=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            compiler=${{ matrix.compiler || 'NOT_SPECIFIED' }}
            driver=${{ matrix.intel_graphics || 'NOT_SPECIFIED' }}
          DB_CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING }}

      - name: Release nvidia ${{ matrix.runner }} resource
        if: always() && matrix.platform == 'nvidia_gpu'
        uses: ./.github/actions/allocate_cb_resource
        with:
          ACTION: unlock
          CB_USER: ${{ secrets.CB_USER }}
          CB_PASSWORD: ${{ secrets.CB_PASSWORD }}
