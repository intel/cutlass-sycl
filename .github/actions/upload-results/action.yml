name: Upload test results
description: Common action to parse and upload test results

inputs:
  LOGS_DIR:
    required: true
    description: Log files directory
  LOG_FILES_REGEX:
    required: false
    description: Regex to match multiple log files to upload, if regex group specified results will be tagged using first group
  LOG_FILE_NAME:
    required: false
    description: Name of specific log file to upload, if passed with regex results will be tagged using first group
  ARTIFACT_NAME:
    required: true
  BENCHMARK_TYPE:
    required: true
  RUN_INFO:
    required: false
  DB_CONNECTION_STRING:
    required: true

runs:
  using: 'composite'
  steps:
    - name: Parse results
      id: parse_results 
      shell: bash
      run: |
        echo "Parsing test results..."
        venv="${{ github.workspace }}/.venv"
        python3.12 -m venv "$venv"
        source "$venv/bin/activate"
        pip install pandas
                
        if [ -n "${{ inputs.LOG_FILE_NAME }}" ]; then
          log_files="${{ inputs.LOGS_DIR }}/${{ inputs.LOG_FILE_NAME }}.log"
        elif [ -n "${{ inputs.LOG_FILES_REGEX }}" ]; then
          readarray -t log_files < <(find ${{ inputs.LOGS_DIR }} -type f | grep -E "${{ inputs.LOG_FILES_REGEX }}\.log")
        else
          log_files=(${{ inputs.LOGS_DIR }}/*.log)
        fi
        
        csv_files=()
        
        for log_file in "${log_files[@]}"; do        
          if [[ $log_file =~ .*/${{ inputs.LOG_FILES_REGEX }}\.log ]]; then
              group="${BASH_REMATCH[1]}"
              if [[ -n $group ]]; then RUN_INFO="${{ inputs.RUN_INFO }} tag=$group"; fi
          fi
          
          # produces CSV file with the same name as log file
          python ${{ github.workspace }}/.github/scripts/parser.py \
            --benchmark-type ${{ inputs.BENCHMARK_TYPE }} \
            --log-file "$log_file" \
            --run-info $RUN_INFO
          
          # check if the CSV file was created
          csv_file="${log_file%.log}.csv"
          if [ ! -f "$csv_file" ]; then
            echo "Failed to parse test results"
            echo "PARSING_FAILED=1" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          csv_files+=("$csv_file")
        done
        
        echo "CSV_FILES=$(IFS='|'; echo "${csv_files[*]}")" >> "$GITHUB_ENV"

    - name: Upload to DB
      if: steps.parse_results.outcome == 'success' && steps.parse_results.outputs.PARSING_FAILED != '1'
      shell: bash
      env:
        DB_CONNECTION_STRING: ${{ inputs.DB_CONNECTION_STRING }}
      run: |
        echo "Uploading test results..."
        venv="${{ github.workspace }}/.venv"
        python3.12 -m venv "$venv"
        source "$venv/bin/activate"
        pip install pandas sqlalchemy psycopg2-binary
        
        IFS="|" read -ra csv_files <<< "$CSV_FILES"
        
        for csv_file in "${csv_files[@]}"; do
          python ${{ github.workspace }}/.github/scripts/uploader.py \
            --benchmark-type ${{ inputs.BENCHMARK_TYPE }} \
            --csv-data-file $csv_file
        done

    - name: Attach CSV
      if: steps.parse_results.outcome == 'success' && steps.parse_results.outputs.PARSING_FAILED != '1'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.ARTIFACT_NAME }}
        path: ${{ inputs.LOGS_DIR }}/*.csv
        if-no-files-found: warn
